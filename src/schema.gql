# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Animal {
  id: Int!
  name: String!
  dateOfBirth: DateTime!
  species: String!
  breed: String!
  color: String!
  weight: Int!
  persons: Person!
  ownerId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Person {
  id: Int!
  lastName: String!
  firstName: String!
  email: String!
  phoneNumber: String!
  animals: [Animal!]
}

type MostAnimalOwnedOutput {
  personId: Int!
  personFirstName: String!
  personLastName: String
  animalCount: Int!
}

type HeaviestGroupOutput {
  personId: Int!
  personFirstName: String!
  personLastName: String
  totalWeight: Int!
}

type PaginatedPersons {
  """List of Persons for the current page"""
  items: [Person!]!

  """Total number of items available across all pages"""
  totalCount: Int!

  """Number of items skipped (offset)"""
  offset: Int!

  """Maximum number of items per page (limit)"""
  limit: Int!
}

type MostRepresentedSpeciesOutput {
  species: String!
  count: Int!
}

type PaginatedAnimals {
  """List of animals for the current page"""
  items: [Animal!]!

  """Total number of items available across all pages"""
  totalCount: Int!

  """Number of items skipped (offset)"""
  offset: Int!

  """Maximum number of items per page (limit)"""
  limit: Int!
}

type Query {
  persons(
    """Number of items to return"""
    limit: Int! = 50

    """Number of items to skip"""
    offset: Int! = 0
  ): PaginatedPersons!
  person(id: Int!): Person!
  mostAnimalsOwned: [MostAnimalOwnedOutput!]
  mostCatsOwned: [MostAnimalOwnedOutput!]
  heaviestGroup: [HeaviestGroupOutput!]
  animals(
    """Number of items to return"""
    limit: Int! = 50

    """Number of items to skip"""
    offset: Int! = 0
  ): PaginatedAnimals!
  animal(id: Int!): Animal!
  oldestAnimal: [Animal!]
  mostRepresentedSpecies: MostRepresentedSpeciesOutput
  heaviestAnimal: [Animal!]
}

type Mutation {
  createPerson(createPersonInput: CreatePersonInput!): Person!
  updatePerson(updatePersonInput: UpdatePersonInput!): Person!
  deletePerson(id: ID!): Person!
  createAnimal(createAnimalInput: CreateAnimalInput!): Animal!
  updateAnimal(updateAnimalInput: UpdateAnimalInput!): Animal!
  deleteAnimal(id: Int!): Animal!
}

input CreatePersonInput {
  lastName: String!
  firstName: String!
  email: String!
  phoneNumber: String!
}

input UpdatePersonInput {
  lastName: String
  firstName: String
  email: String
  phoneNumber: String
  id: ID!
}

input CreateAnimalInput {
  name: String!
  dateOfBirth: DateTime!
  species: String!
  breed: String!
  color: String!
  weight: Int!
  ownerId: Int!
}

input UpdateAnimalInput {
  name: String
  dateOfBirth: DateTime
  species: String
  breed: String
  color: String
  weight: Int
  ownerId: Int
  id: ID!
}